# Define "clusters"
upstream client-upstream
{
	server client:8080;
}

upstream hmr-upstream
{
	server client:443;
}

upstream server-upstream
{
	server server:3000;
}

upstream socket-upstream
{
	server server:3000;
}

# Force "https" redirection
server
{
	listen      80;
	listen [::]:80;

	return 301 https://$host:4443$request_uri;
}

# Application
server
{
	listen      443 ssl default_server;
	listen [::]:443 ssl default_server;

	ssl_certificate       /etc/ssl/matcha.crt;
	ssl_certificate_key   /etc/ssl/matcha.key;

	charset utf-8;
	client_max_body_size 10M;

	error_log  "/var/log/nginx/error.log" debug;
	access_log "/var/log/nginx/access.log";

	# Handle default browsers request for "/favicon.ico"
	location = /favicon.ico
	{
		try_files $uri =204; # 204 = No Content
		access_log off;
	}

	# Common rules (inherited by "location")
	proxy_http_version 1.1;
	proxy_cache_bypass $http_upgrade;

	proxy_set_header Host       $host;
	proxy_set_header Upgrade    $http_upgrade;
	proxy_set_header Connection 'Upgrade';

	proxy_set_header X-Real-IP         $remote_addr;
	proxy_set_header X-Forwarded-Host  $http_host;
	proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;

	# Client
	location /
	{
		proxy_pass http://client-upstream;
	}

	# Hot Module Reload
	location /hmr
	{
		proxy_pass http://hmr-upstream;
	}

	# Server
	location /api/
	{
		rewrite /api/(.*) /$1 break; # Remove the "/api" prefix
		proxy_pass http://server-upstream;
	}

	# Socket
	location /socket.io/
	{
		proxy_pass http://socket-upstream;
	}
}
